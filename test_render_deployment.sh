#!/bin/bash

# Test script for complete Render deployment functionality
FRONTEND_URL="https://portfolio-frontend-zhcd.onrender.com"
BACKEND_URL="https://portfolio-backend-skva.onrender.com"

echo "üöÄ Testing Complete Render Deployment"
echo "Frontend: $FRONTEND_URL"
echo "Backend: $BACKEND_URL"
echo "========================================================"

# Test 1: Frontend accessibility
echo ""
echo "1Ô∏è‚É£ Testing Frontend Deployment..."
frontend_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" "$FRONTEND_URL")
frontend_code=$(echo "$frontend_response" | grep "HTTP_CODE:" | cut -d: -f2)

if [ "$frontend_code" = "200" ]; then
    echo "   ‚úÖ Frontend is accessible"
    # Check if it contains React app indicators
    if echo "$frontend_response" | grep -q "vite\|react\|div.*id.*root"; then
        echo "   ‚úÖ Frontend appears to be a React application"
    else
        echo "   ‚ö†Ô∏è  Frontend may not be built correctly"
    fi
else
    echo "   ‚ùå Frontend failed with status $frontend_code"
fi

# Test 2: Backend API endpoints
echo ""
echo "2Ô∏è‚É£ Testing Backend API..."
backend_health=$(curl -s "$BACKEND_URL/api/health")
if echo "$backend_health" | grep -q "healthy"; then
    echo "   ‚úÖ Backend health check passed"
    echo "   üìä Health status: $(echo $backend_health | grep -o '"status":"[^"]*"')"
else
    echo "   ‚ùå Backend health check failed"
    echo "   Response: $backend_health"
fi

# Test 3: Database connectivity and data
echo ""
echo "3Ô∏è‚É£ Testing Database & Projects..."
projects_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" "$BACKEND_URL/api/projects/")
projects_code=$(echo "$projects_response" | grep "HTTP_CODE:" | cut -d: -f2)
projects_data=$(echo "$projects_response" | grep -v "HTTP_CODE:")

if [ "$projects_code" = "200" ]; then
    echo "   ‚úÖ Projects API accessible"
    
    # Count projects
    project_count=$(echo "$projects_data" | grep -o '"id":[0-9]*' | wc -l)
    echo "   üìä Found $project_count projects in database"
    
    if [ "$project_count" -gt "0" ]; then
        echo "   ‚úÖ Database has project data"
        # Show sample project
        first_project_title=$(echo "$projects_data" | grep -o '"title":"[^"]*"' | head -1 | cut -d'"' -f4)
        echo "   üìù Sample project: $first_project_title"
    else
        echo "   ‚ö†Ô∏è  Database appears empty"
    fi
else
    echo "   ‚ùå Projects API failed with status $projects_code"
fi

# Test 4: Skills API
echo ""
echo "4Ô∏è‚É£ Testing Skills API..."
skills_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" "$BACKEND_URL/api/skills/")
skills_code=$(echo "$skills_response" | grep "HTTP_CODE:" | cut -d: -f2)
skills_data=$(echo "$skills_response" | grep -v "HTTP_CODE:")

if [ "$skills_code" = "200" ]; then
    echo "   ‚úÖ Skills API accessible"
    skill_count=$(echo "$skills_data" | grep -o '"id":[0-9]*' | wc -l)
    echo "   üìä Found $skill_count skills in database"
else
    echo "   ‚ùå Skills API failed with status $skills_code"
fi

# Test 5: Resume API
echo ""
echo "5Ô∏è‚É£ Testing Resume API..."
resume_response=$(curl -s -w "\nHTTP_CODE:%{http_code}" "$BACKEND_URL/api/resume/personal")
resume_code=$(echo "$resume_response" | grep "HTTP_CODE:" | cut -d: -f2)

if [ "$resume_code" = "200" ]; then
    echo "   ‚úÖ Resume API accessible"
else
    echo "   ‚ùå Resume API failed with status $resume_code"
fi

# Test 6: CORS Configuration
echo ""
echo "6Ô∏è‚É£ Testing CORS Configuration..."
cors_response=$(curl -s -H "Origin: $FRONTEND_URL" -H "Access-Control-Request-Method: GET" -H "Access-Control-Request-Headers: Content-Type" -X OPTIONS "$BACKEND_URL/api/projects/")
if [ -n "$cors_response" ] || [ $? -eq 0 ]; then
    echo "   ‚úÖ CORS appears to be configured"
else
    echo "   ‚ö†Ô∏è  CORS may need attention"
fi

echo ""
echo "========================================================"
echo "üìä DEPLOYMENT SUMMARY"
echo "========================================================"

# Final assessment
if [ "$frontend_code" = "200" ] && echo "$backend_health" | grep -q "healthy" && [ "$projects_code" = "200" ]; then
    echo "üéâ SUCCESS: Your Render deployment is working correctly!"
    echo ""
    echo "‚úÖ Frontend is deployed and accessible"
    echo "‚úÖ Backend API is responding"
    echo "‚úÖ Database is connected and has data"
    echo "‚úÖ All core endpoints are functional"
    echo ""
    echo "üåê Your live portfolio: $FRONTEND_URL"
    echo "üîó API endpoint: $BACKEND_URL/api"
    echo ""
    echo "üéØ You can now:"
    echo "   ‚Ä¢ Visit your live portfolio"
    echo "   ‚Ä¢ Add GitHub projects via the frontend"
    echo "   ‚Ä¢ Test project persistence"
    echo "   ‚Ä¢ Share your portfolio URL with others"
else
    echo "‚ö†Ô∏è  Some issues detected:"
    [ "$frontend_code" != "200" ] && echo "   ‚Ä¢ Frontend accessibility issue"
    [ ! $(echo "$backend_health" | grep -q "healthy") ] && echo "   ‚Ä¢ Backend health check issue"
    [ "$projects_code" != "200" ] && echo "   ‚Ä¢ Projects API issue"
    echo ""
    echo "üí° Check Render dashboard for detailed logs and status"
fi

echo ""